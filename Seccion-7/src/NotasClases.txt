const impura = () => new Date().toLocaleString()

// funciones impura son aquellas que el valor retornado puede ser cambiante, por ejemplo la que tenemos arriba o tambien puede ser el llamado a una api o una base de datos, dado a que los datos pueden cambiar o arrojar un error.
//  a su vez los componentes funcionales son funciones puras siempre.
const MiComponente = ({miProp}) =>{
  return(
    <div>
      Nombre: {miProp}
    </div>
  )
}




const App = () => {
  return(
    <MiComponente miProp={ 'chanchito feliz' }/>
  )
}
export default App


------------------------DIFERENCIA ENTRE UN COMPONENTE DE CLASE Y UNO funcionales
import { useState } from "react"
import { Component } from "react"


// reglas de los Hooks:
// No se llaman en loops, ni condiciones ni nada. Siempre en el nivel mas alto del componente
//  Solo se llaman en dos partes, la primera en componentes de react y la segunda parte es en customs Hooks
// Cuando creemos un custom hooks este siempre tiene que comenzar con el nombre de use* y el nombre del hook
class App extends Component{

  incrementar = () => {
    state = {contador: 0}
    this.setState({contador: contador + 1})
  }
  render(){
    return(
      <div>
      Contador: this.state.contador
      <button onClick={this.incrementar}>Incrementar</button>
    </div>

    )
  }
}
// const App = () => {
//   return(
//     <div>
//       Contador: {contador}
//       <button onClick={() => setContador(contador + 1)}>Incrementar</button>
//     </div>
//   )
// }

export default App




---------------------CUSTOM Hooks


import { useState } from "react"



const useContador = (inicial) => {
  const [contador, setContador] = useState(inicial)
  const incrementar = () => {
    setContador(contador + 1 )
  }

  return[contador, incrementar]
}
const App = () => {
  const  [contador, incrementar] = useContador(0)
  return(
    <div>
      Contador: {contador}
      <button onClick={incrementar}>Incrementar</button>
    </div>
  )
}

export default App


--------------------------DESUSCRIBIRSE A UN ESTADO

import { useEffect, useState } from "react"



const useContador = (inicial) => {
  const [contador, setContador] = useState(inicial)
  const incrementar = () => {
    setContador(contador + 1 )
  }

  return[contador, incrementar]
}

const Interval = ({contador}) => {
  useEffect(() => {
const i = setInterval(() => console.log(contador), 1000 )
return () => clearInterval(i)
}, [contador])
  
return(
  <p>Intervalo</p>
)
}

const App = () => {
  const  [contador, incrementar] = useContador(0)
  useEffect(() => {
    document.title = contador
  }, [contador])
  return(
    <div>
      Contador: {contador}
      <button onClick={incrementar}>Incrementar</button>
      <Interval contador={contador} />
    </div>
  )
}

export default App



----------------------------- componente de CLASE

import { Component, useEffect, useState } from "react"



const useContador = (inicial) => {
  const [contador, setContador] = useState(inicial)
  const incrementar = () => {
    setContador(contador + 1 )
  }

  return[contador, incrementar]
}

// const Interval = ({contador}) => {
//   useEffect(() => {
// const i = setInterval(() => console.log(contador), 1000 )
// return () => clearInterval(i)
// }, [contador])
  
// return(
//   <p>Intervalo</p>
// )
// }

class Interval extends Component{
  intervalo=''
  componentDidMount(){
    this.intervalo= setInterval(() => console.log(this.props.contador), 1000 )
  }
  componentWillUnmount(){
    clearInterval(this.intervalo)
  }
  render(){
    return(
      <p>Intervalo</p>
    )
  }
}



const App = () => {
  const  [contador, incrementar] = useContador(0)
  useEffect(() => {
    document.title = contador
  }, [contador])
  return(
    <div>
      Contador: {contador}
      <button onClick={incrementar}>Incrementar</button>
      <Interval contador={contador} />
    </div>
  )
}

export default App

-----------------------------USEREDUCER

import { useReducer, useState } from "react";

// const state = { contador: 0 }
//action = { type: string, payload: any }
const inicial = {contador: 0}
const reducer = (state, action) => {
  switch (action.type) {
    case "incrementar":
      return { contador: state.contador + 1 }
    case "decrementar":
      return { contador: state.contador - 1 }
    case "set":
      return { contador: action.payload }
    default:
      return state
  }
}


const App = () => {
  const [state, dispatch] = useReducer(reducer, inicial)
  const [valor, setValor] = useState(0)
  return(
    <div>contador: {state.contador}
    <input value={valor} onChange={e => setValor(e.target.value)} />
    <button onClick={()=>dispatch({type:"incrementar"})}>Mas</button>
    <button onClick={()=>dispatch({type:"decrementar"})}>Menos</button>
    <button onClick={()=>dispatch({type:"set", payload: valor})}>SETEAR</button>
    </div>
  )
}

export default App